[{"title":"Cleaner","type":0,"sectionRef":"#","url":"api/Cleaner","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#types","content":" "},{"title":"Task​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#Task","content":"&lt;/&gt; type Task = function | Instance | RbxScriptConnection | table Task that can be passed to a variety of methods that can be cleaned up  "},{"title":"Finalizer​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#Finalizer","content":"&lt;/&gt; type Finalizer = function | string Function or string that will point to a method that will be passed finalizer arguments  "},{"title":"Key​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#Key","content":"&lt;/&gt; type Key = string | number | userdata | table Key that can be used to assign specific tasks "},{"title":"Properties​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#properties","content":" "},{"title":"working​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#working","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Cleaner.working: boolean Will be set to true if the cleaner object is currently doing work "},{"title":"Functions​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#functions","content":" "},{"title":"add​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#add","content":"&lt;/&gt; Cleaner:add( task: Task, finalizer?: Finalizer,-- If nil, it will check for a destroy method in an object if it's a table ...?: any-- Optional arguments passed to the finalizer when called if they aren't overwritten by finalize ) → Task-- Returns the passed task so you can write less code Adds a task to the cleaner "},{"title":"Errors","type":1,"pageTitle":"Cleaner","url":"api/Cleaner##","content":"Type\tDescription&quot;No finalizer found for %s (typeof: %s)&quot; &quot;Attempted to add duplicate %s (typeof: %s)&quot;\t  "},{"title":"has​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#has","content":"&lt;/&gt; Cleaner:has(task: Task) → boolean Returns whether or not a task has been added to the cleaner  "},{"title":"set​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#set","content":"&lt;/&gt; Cleaner:set( key: Key, task: Task, ...?: any-- Optional arguments passed to the finalizer when called if they aren't overwritten by finalize ) → Task Adds a task and assigns a key to the task in the cleaner  "},{"title":"get​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#get","content":"&lt;/&gt; Cleaner:get(key: Key) → Task | nil Gets the task assigned to the key  "},{"title":"extract​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#extract","content":"&lt;/&gt; Cleaner:extract(key: Key) → Task Removes the task at the key from the task list "},{"title":"Errors","type":1,"pageTitle":"Cleaner","url":"api/Cleaner##","content":"Type\tDescription&quot;Key (%s) is not assigned to any task&quot;\t  "},{"title":"finalize​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#finalize","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Cleaner:finalize( key: Key, ...?: any-- Optional arguments that can be used to overwrite any that were included in the set call ) → Task Finalizes the task at the key and passes the args to the finalizer if included. This can yield if the finalizer yields. "},{"title":"Errors","type":1,"pageTitle":"Cleaner","url":"api/Cleaner##","content":"Type\tDescription&quot;Key (%s) is not assigned to any task&quot;\t  "},{"title":"work​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#work","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Cleaner:work() → () Starts working on the task list. This can yield if any finalizers yield. "},{"title":"Errors","type":1,"pageTitle":"Cleaner","url":"api/Cleaner##","content":"Type\tDescription&quot;Attempted to call work when already working&quot;\t  "},{"title":"destroy​","type":1,"pageTitle":"Cleaner","url":"api/Cleaner#destroy","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Cleaner:destroy() → () Cleans up the cleaner object by calling work and setting the destroyed field to true. This can yield if any finalizers yield. "},{"title":"Errors","type":1,"pageTitle":"Cleaner","url":"api/Cleaner##","content":"Type\tDescription&quot;Attempted to call destroy when already destroying or destroyed&quot;\t "}]